// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: car_model_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarModelServiceClient is the client API for CarModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarModelServiceClient interface {
	CreateCarModel(ctx context.Context, in *CreateCarModelRequest, opts ...grpc.CallOption) (*CarModel, error)
	GetCarModel(ctx context.Context, in *GetCarModelRequest, opts ...grpc.CallOption) (*CarModel, error)
	ListCarModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCarModelsResponse, error)
	DeleteCarModel(ctx context.Context, in *DeleteCarModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type carModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarModelServiceClient(cc grpc.ClientConnInterface) CarModelServiceClient {
	return &carModelServiceClient{cc}
}

func (c *carModelServiceClient) CreateCarModel(ctx context.Context, in *CreateCarModelRequest, opts ...grpc.CallOption) (*CarModel, error) {
	out := new(CarModel)
	err := c.cc.Invoke(ctx, "/gen.CarModelService/CreateCarModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carModelServiceClient) GetCarModel(ctx context.Context, in *GetCarModelRequest, opts ...grpc.CallOption) (*CarModel, error) {
	out := new(CarModel)
	err := c.cc.Invoke(ctx, "/gen.CarModelService/GetCarModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carModelServiceClient) ListCarModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCarModelsResponse, error) {
	out := new(ListCarModelsResponse)
	err := c.cc.Invoke(ctx, "/gen.CarModelService/ListCarModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carModelServiceClient) DeleteCarModel(ctx context.Context, in *DeleteCarModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gen.CarModelService/DeleteCarModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarModelServiceServer is the server API for CarModelService service.
// All implementations must embed UnimplementedCarModelServiceServer
// for forward compatibility
type CarModelServiceServer interface {
	CreateCarModel(context.Context, *CreateCarModelRequest) (*CarModel, error)
	GetCarModel(context.Context, *GetCarModelRequest) (*CarModel, error)
	ListCarModels(context.Context, *emptypb.Empty) (*ListCarModelsResponse, error)
	DeleteCarModel(context.Context, *DeleteCarModelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCarModelServiceServer()
}

// UnimplementedCarModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarModelServiceServer struct {
}

func (UnimplementedCarModelServiceServer) CreateCarModel(context.Context, *CreateCarModelRequest) (*CarModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarModel not implemented")
}
func (UnimplementedCarModelServiceServer) GetCarModel(context.Context, *GetCarModelRequest) (*CarModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarModel not implemented")
}
func (UnimplementedCarModelServiceServer) ListCarModels(context.Context, *emptypb.Empty) (*ListCarModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarModels not implemented")
}
func (UnimplementedCarModelServiceServer) DeleteCarModel(context.Context, *DeleteCarModelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarModel not implemented")
}
func (UnimplementedCarModelServiceServer) mustEmbedUnimplementedCarModelServiceServer() {}

// UnsafeCarModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarModelServiceServer will
// result in compilation errors.
type UnsafeCarModelServiceServer interface {
	mustEmbedUnimplementedCarModelServiceServer()
}

func RegisterCarModelServiceServer(s grpc.ServiceRegistrar, srv CarModelServiceServer) {
	s.RegisterService(&CarModelService_ServiceDesc, srv)
}

func _CarModelService_CreateCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarModelServiceServer).CreateCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.CarModelService/CreateCarModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarModelServiceServer).CreateCarModel(ctx, req.(*CreateCarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarModelService_GetCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarModelServiceServer).GetCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.CarModelService/GetCarModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarModelServiceServer).GetCarModel(ctx, req.(*GetCarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarModelService_ListCarModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarModelServiceServer).ListCarModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.CarModelService/ListCarModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarModelServiceServer).ListCarModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarModelService_DeleteCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarModelServiceServer).DeleteCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.CarModelService/DeleteCarModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarModelServiceServer).DeleteCarModel(ctx, req.(*DeleteCarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarModelService_ServiceDesc is the grpc.ServiceDesc for CarModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.CarModelService",
	HandlerType: (*CarModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCarModel",
			Handler:    _CarModelService_CreateCarModel_Handler,
		},
		{
			MethodName: "GetCarModel",
			Handler:    _CarModelService_GetCarModel_Handler,
		},
		{
			MethodName: "ListCarModels",
			Handler:    _CarModelService_ListCarModels_Handler,
		},
		{
			MethodName: "DeleteCarModel",
			Handler:    _CarModelService_DeleteCarModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car_model_service.proto",
}
