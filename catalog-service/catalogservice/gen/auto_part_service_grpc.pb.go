// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: auto_part_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutoPartServiceClient is the client API for AutoPartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoPartServiceClient interface {
	CreateAutoPart(ctx context.Context, in *CreateAutoPartRequest, opts ...grpc.CallOption) (*AutoPart, error)
	GetAutoPart(ctx context.Context, in *GetAutoPartRequest, opts ...grpc.CallOption) (*AutoPart, error)
	ListAutoParts(ctx context.Context, in *ListAutoPartsRequest, opts ...grpc.CallOption) (*ListAutoPartsResponse, error)
	DeleteAutoPart(ctx context.Context, in *DeleteAutoPartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type autoPartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoPartServiceClient(cc grpc.ClientConnInterface) AutoPartServiceClient {
	return &autoPartServiceClient{cc}
}

func (c *autoPartServiceClient) CreateAutoPart(ctx context.Context, in *CreateAutoPartRequest, opts ...grpc.CallOption) (*AutoPart, error) {
	out := new(AutoPart)
	err := c.cc.Invoke(ctx, "/gen.AutoPartService/CreateAutoPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoPartServiceClient) GetAutoPart(ctx context.Context, in *GetAutoPartRequest, opts ...grpc.CallOption) (*AutoPart, error) {
	out := new(AutoPart)
	err := c.cc.Invoke(ctx, "/gen.AutoPartService/GetAutoPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoPartServiceClient) ListAutoParts(ctx context.Context, in *ListAutoPartsRequest, opts ...grpc.CallOption) (*ListAutoPartsResponse, error) {
	out := new(ListAutoPartsResponse)
	err := c.cc.Invoke(ctx, "/gen.AutoPartService/ListAutoParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoPartServiceClient) DeleteAutoPart(ctx context.Context, in *DeleteAutoPartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gen.AutoPartService/DeleteAutoPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoPartServiceServer is the server API for AutoPartService service.
// All implementations must embed UnimplementedAutoPartServiceServer
// for forward compatibility
type AutoPartServiceServer interface {
	CreateAutoPart(context.Context, *CreateAutoPartRequest) (*AutoPart, error)
	GetAutoPart(context.Context, *GetAutoPartRequest) (*AutoPart, error)
	ListAutoParts(context.Context, *ListAutoPartsRequest) (*ListAutoPartsResponse, error)
	DeleteAutoPart(context.Context, *DeleteAutoPartRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAutoPartServiceServer()
}

// UnimplementedAutoPartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAutoPartServiceServer struct {
}

func (UnimplementedAutoPartServiceServer) CreateAutoPart(context.Context, *CreateAutoPartRequest) (*AutoPart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoPart not implemented")
}
func (UnimplementedAutoPartServiceServer) GetAutoPart(context.Context, *GetAutoPartRequest) (*AutoPart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoPart not implemented")
}
func (UnimplementedAutoPartServiceServer) ListAutoParts(context.Context, *ListAutoPartsRequest) (*ListAutoPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoParts not implemented")
}
func (UnimplementedAutoPartServiceServer) DeleteAutoPart(context.Context, *DeleteAutoPartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoPart not implemented")
}
func (UnimplementedAutoPartServiceServer) mustEmbedUnimplementedAutoPartServiceServer() {}

// UnsafeAutoPartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoPartServiceServer will
// result in compilation errors.
type UnsafeAutoPartServiceServer interface {
	mustEmbedUnimplementedAutoPartServiceServer()
}

func RegisterAutoPartServiceServer(s grpc.ServiceRegistrar, srv AutoPartServiceServer) {
	s.RegisterService(&AutoPartService_ServiceDesc, srv)
}

func _AutoPartService_CreateAutoPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoPartServiceServer).CreateAutoPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.AutoPartService/CreateAutoPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoPartServiceServer).CreateAutoPart(ctx, req.(*CreateAutoPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoPartService_GetAutoPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoPartServiceServer).GetAutoPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.AutoPartService/GetAutoPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoPartServiceServer).GetAutoPart(ctx, req.(*GetAutoPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoPartService_ListAutoParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoPartServiceServer).ListAutoParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.AutoPartService/ListAutoParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoPartServiceServer).ListAutoParts(ctx, req.(*ListAutoPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoPartService_DeleteAutoPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoPartServiceServer).DeleteAutoPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.AutoPartService/DeleteAutoPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoPartServiceServer).DeleteAutoPart(ctx, req.(*DeleteAutoPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoPartService_ServiceDesc is the grpc.ServiceDesc for AutoPartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoPartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.AutoPartService",
	HandlerType: (*AutoPartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoPart",
			Handler:    _AutoPartService_CreateAutoPart_Handler,
		},
		{
			MethodName: "GetAutoPart",
			Handler:    _AutoPartService_GetAutoPart_Handler,
		},
		{
			MethodName: "ListAutoParts",
			Handler:    _AutoPartService_ListAutoParts_Handler,
		},
		{
			MethodName: "DeleteAutoPart",
			Handler:    _AutoPartService_DeleteAutoPart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auto_part_service.proto",
}
